// Package server contains our server code.
package server

import (
	swagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/gofiber/fiber/v2"

	"assignment/pkg/repository"
	// hello
	_ "assignment/docs"
	// docs are generated by Swag CLI, you have to import them.
	// _ "github.com/arsmn/fiber-swagger/v2/example/docs"
)

// Server is our server interface.
type Server interface {
	Run() error
}

type apiServer struct {
	app  *fiber.App
	repo repository.Repository
}

// New creates a new server.
func New(repo repository.Repository) Server {
	srv := apiServer{
		app:  fiber.New(),
		repo: repo,
	}

	// Special routes; doing here!
	srv.app.Post("/reset", srv.reset)

	srv.app.Get("/swagger/*", swagger.Handler)

	srv.addEmployeeRoutes()
	srv.addRoleRoutes()
	srv.addContractorRoutes()
	srv.addTagRoutes()

	return &srv
}

// @Summary Reset the DB
// @Tags misc
// @Accept json
// @Produce json
// @Success 200 {object} string
// @Router /reset [post]
func (s *apiServer) reset(*fiber.Ctx) error {
	if err := s.repo.Reset(); err != nil {
		return fiber.NewError(
			fiber.StatusInternalServerError,
			"reset error",
		)
	}

	return nil
}

// Run starts the server.
func (s *apiServer) Run() error {
	return s.app.Listen(":3000")
}

func (s *apiServer) badRequest(c *fiber.Ctx, err error) error {
	c.SendString(err.Error())
	return c.SendStatus(fiber.StatusBadRequest)
}

func (s *apiServer) serverError(c *fiber.Ctx) error {
	return c.SendStatus(fiber.StatusInternalServerError)
}

func (s *apiServer) notFound(c *fiber.Ctx) error {
	return c.SendStatus(fiber.StatusNotFound)
}
